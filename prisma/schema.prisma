// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"

  // Enable if using driver adapters
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id      String @id @default(cuid())
  clerkId String @unique

  username String

  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  personas       Persona[]
  personaPrompts PersonaPrompt[]
  comments       Comment[]

  // Xata fields
  xata_updatedat   DateTime          @default(now()) @db.Timestamptz(6)
  xata_id          String            @unique(map: "_pgroll_user_xata_id_key") @default(dbgenerated("('rec_'::text || (xata_private.xid())::text)"))
  xata_version     Int               @default(0)
  xata_createdat   DateTime          @default(now()) @db.Timestamptz(6)
  PersonaLikes     PersonaLike[]
  PersonaBookmarks PersonaBookmark[]
}

model PersonaPrompt {
  id String @id @default(cuid())

  input  Json
  prompt String?

  personas Persona[]

  creator   User   @relation(fields: [creatorId], references: [id])
  creatorId String

  createdAt DateTime @default(now())

  // Xata fields
  xata_updatedat DateTime @default(now()) @db.Timestamptz(6)
  xata_id        String   @unique(map: "_pgroll_persona_prompt_xata_id_key") @default(dbgenerated("('rec_'::text || (xata_private.xid())::text)"))
  xata_version   Int      @default(0)
  xata_createdat DateTime @default(now()) @db.Timestamptz(6)
}

model Persona {
  id String @id @default(cuid())

  // Persona main details
  name       String
  gender     String
  age        String
  occupation String

  // Add summary for better persona tiles
  summary String

  // Structured fields for commonly queried attributes
  personalityTraits  String[]
  interests          String[]
  culturalBackground String

  // Detailed description fields as text
  appearance      String
  background      String
  history         String
  characteristics String

  // Full text description
  fullDescription String

  // Image related fields
  mainImageUrl  String?
  consistencyId String? // For image generation consistency

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  published Boolean  @default(false)

  creator   User   @relation(fields: [creatorId], references: [id])
  creatorId String

  viewCount Int @default(0)

  likesCount Int           @default(0)
  likes      PersonaLike[]

  bookmarks PersonaBookmark[]

  comments Comment[]

  tags String[]

  prompt   PersonaPrompt? @relation(fields: [promptId], references: [id])
  promptId String?

  // Xata fields
  xata_updatedat DateTime @default(now()) @db.Timestamptz(6)
  xata_id        String   @unique(map: "_pgroll_persona_xata_id_key") @default(dbgenerated("('rec_'::text || (xata_private.xid())::text)"))
  xata_version   Int      @default(0)
  xata_createdat DateTime @default(now()) @db.Timestamptz(6)
  Image          Image[]
}

model PersonaLike {
  persona   Persona @relation(fields: [personaId], references: [id])
  personaId String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  createdAt DateTime @default(now())

  // Xata fields
  xata_updatedat DateTime @default(now()) @db.Timestamptz(6)
  xata_id        String   @unique(map: "_pgroll_persona_like_xata_id_key") @default(dbgenerated("('rec_'::text || (xata_private.xid())::text)"))
  xata_version   Int      @default(0)
  xata_createdat DateTime @default(now()) @db.Timestamptz(6)

  @@unique([personaId, userId])
  @@index([personaId, userId])
  @@map("PersonaLikes")
}

model PersonaBookmark {
  persona   Persona @relation(fields: [personaId], references: [id])
  personaId String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  createdAt DateTime @default(now())

  // Xata fields
  xata_updatedat DateTime @default(now()) @db.Timestamptz(6)
  xata_id        String   @unique(map: "_pgroll_persona_bookmark_xata_id_key") @default(dbgenerated("('rec_'::text || (xata_private.xid())::text)"))
  xata_version   Int      @default(0)
  xata_createdat DateTime @default(now()) @db.Timestamptz(6)

  @@unique([personaId, userId])
  @@index([personaId, userId])
  @@map("PersonaBookmarks")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  persona   Persona  @relation(fields: [personaId], references: [id])
  personaId String
  user      User     @relation(fields: [userId], references: [id])
  userId    String

  // Xata fields
  xata_updatedat DateTime @default(now()) @db.Timestamptz(6)
  xata_id        String   @unique(map: "_pgroll_comment_xata_id_key") @default(dbgenerated("('rec_'::text || (xata_private.xid())::text)"))
  xata_version   Int      @default(0)
  xata_createdat DateTime @default(now()) @db.Timestamptz(6)
}

model Image {
  id String @id @default(cuid())

  prompt String? // Allow user to upload custom images, this images won't have a prompt

  persona   Persona @relation(fields: [personaId], references: [id])
  personaId String

  // Xata fields
  xata_updatedat DateTime @default(now()) @db.Timestamptz(6)
  xata_id        String   @unique(map: "_pgroll_image_xata_id_key") @default(dbgenerated("('rec_'::text || (xata_private.xid())::text)"))
  xata_version   Int      @default(0)
  xata_createdat DateTime @default(now()) @db.Timestamptz(6)
}
