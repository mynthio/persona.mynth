generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id String @id

  username String
  imageUrl String?
  email    String? @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  personas         Persona[]
  personaPrompts   PersonaPrompt[]
  comment          Comment[]
  personaLikes     PersonaLike[]
  personaBookmarks PersonaBookmark[]
  chats            Chat[]

  // Xata fields
  xata_updatedat DateTime @default(now()) @db.Timestamptz(6)
  xata_id        String   @unique(map: "_pgroll_user_xata_id_key") @default(dbgenerated("('rec_'::text || (xata_private.xid())::text)"))
  xata_version   Int      @default(0)
  xata_createdat DateTime @default(now()) @db.Timestamptz(6)
  Image          Image[]
}

model PersonaPrompt {
  id   String @id @default(dbgenerated("('pp_'::text || (xata_private.xid())::text)"))
  name String @default("New prompt")

  input    Json
  isPublic Boolean @default(false)

  personaGenerations PersonaGeneration[]

  creator   User   @relation(fields: [creatorId], references: [id])
  creatorId String

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  publishedAt DateTime?

  // Xata fields
  xata_updatedat DateTime @default(now()) @db.Timestamptz(6)
  xata_id        String   @unique(map: "_pgroll_persona_prompt_xata_id_key") @default(dbgenerated("('rec_'::text || (xata_private.xid())::text)"))
  xata_version   Int      @default(0)
  xata_createdat DateTime @default(now()) @db.Timestamptz(6)
}

model PersonaGeneration {
  id     String @id @default(dbgenerated("('pg_'::text || (xata_private.xid())::text)"))
  status String @default("queued")

  inngestEventId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  prompt   PersonaPrompt @relation(fields: [promptId], references: [id], onDelete: Cascade)
  promptId String

  persona Persona?

  model         String
  promptVersion Int

  // Xata fields
  xata_updatedat DateTime @default(now()) @db.Timestamptz(6)
  xata_id        String   @unique(map: "_pgroll_persona_generation_xata_id_key") @default(dbgenerated("('rec_'::text || (xata_private.xid())::text)"))
  xata_version   Int      @default(0)
  xata_createdat DateTime @default(now()) @db.Timestamptz(6)

  @@index([inngestEventId])
  @@index([promptId])
  @@index([status])
}

model Persona {
  id String @id @default(dbgenerated("('ps_'::text || (xata_private.xid())::text)"))

  // Persona main details
  name       String
  gender     String
  age        String
  occupation String

  // Add summary for better persona tiles
  summary String

  // Structured fields for commonly queried attributes
  personalityTraits  String
  interests          String
  culturalBackground String

  // Detailed description fields as text
  appearance      String
  style           String @default("-")
  background      String
  history         String
  characteristics String

  // Full text description
  fullDescription String?

  // Image related fields
  mainImageUrl  String?
  consistencyId String?

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  publishedAt DateTime?
  published   Boolean   @default(false)
  isNsfw      Boolean   @default(false)

  creator   User   @relation(fields: [creatorId], references: [id])
  creatorId String

  viewCount Int @default(0)

  likesCount Int           @default(0)
  likes      PersonaLike[]

  bookmarks PersonaBookmark[]

  comments Comment[]

  tags String[]

  images Image[]
  chats  Chat[]

  personaGeneration   PersonaGeneration? @relation(fields: [personaGenerationId], references: [id], onDelete: Cascade)
  personaGenerationId String?            @unique

  // Copies and original personas
  original          Boolean   @default(true)
  originalPersonaId String? // Reference to the original persona if this is a copy
  originalPersona   Persona?  @relation("persona_copied_from", fields: [originalPersonaId], references: [id])
  copies            Persona[] @relation("persona_copied_from")
  copiesCount       Int       @default(0)

  // Xata fields
  xata_updatedat DateTime @default(now()) @db.Timestamptz(6)
  xata_id        String   @unique(map: "_pgroll_persona_xata_id_key") @default(dbgenerated("('rec_'::text || (xata_private.xid())::text)"))
  xata_version   Int      @default(0)
  xata_createdat DateTime @default(now()) @db.Timestamptz(6)
}

model PersonaLike {
  persona   Persona @relation(fields: [personaId], references: [id])
  personaId String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  createdAt DateTime @default(now())

  // Xata fields
  xata_updatedat DateTime @default(now()) @db.Timestamptz(6)
  xata_id        String   @unique(map: "_pgroll_persona_like_xata_id_key") @default(dbgenerated("('rec_'::text || (xata_private.xid())::text)"))
  xata_version   Int      @default(0)
  xata_createdat DateTime @default(now()) @db.Timestamptz(6)

  @@unique([personaId, userId])
  @@index([personaId, userId])
}

model PersonaBookmark {
  persona   Persona @relation(fields: [personaId], references: [id], onDelete: Cascade)
  personaId String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  createdAt DateTime @default(now())

  // Xata fields
  xata_updatedat DateTime @default(now()) @db.Timestamptz(6)
  xata_id        String   @unique(map: "_pgroll_persona_bookmark_xata_id_key") @default(dbgenerated("('rec_'::text || (xata_private.xid())::text)"))
  xata_version   Int      @default(0)
  xata_createdat DateTime @default(now()) @db.Timestamptz(6)

  @@unique([personaId, userId])
  @@index([personaId, userId])
}

model Comment {
  id String @id @default(dbgenerated("('cm_'::text || (xata_private.xid())::text)"))

  content String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  persona   Persona @relation(fields: [personaId], references: [id], onDelete: Cascade)
  personaId String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  // Xata fields
  xata_updatedat DateTime @default(now()) @db.Timestamptz(6)
  xata_id        String   @unique(map: "_pgroll_comment_xata_id_key") @default(dbgenerated("('rec_'::text || (xata_private.xid())::text)"))
  xata_version   Int      @default(0)
  xata_createdat DateTime @default(now()) @db.Timestamptz(6)
}

model Image {
  id String @id @default(dbgenerated("('i_'::text || (xata_private.xid())::text)"))

  prompt String?
  model  String?
  labels String[] @default([])

  ai     Boolean @default(true)
  public Boolean @default(false)

  imageUrl String

  persona   Persona? @relation(fields: [personaId], references: [id], onDelete: Cascade)
  personaId String?

  creator   User?   @relation(fields: [creatorId], references: [id])
  creatorId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  // Xata fields
  xata_updatedat DateTime @default(now()) @db.Timestamptz(6)
  xata_id        String   @unique(map: "_pgroll_image_xata_id_key") @default(dbgenerated("('rec_'::text || (xata_private.xid())::text)"))
  xata_version   Int      @default(0)
  xata_createdat DateTime @default(now()) @db.Timestamptz(6)
}

model Chat {
  id String @id @default(dbgenerated("('ch_'::text || (xata_private.xid())::text)"))

  createdAt DateTime @default(now())

  persona   Persona? @relation(fields: [personaId], references: [id], onDelete: Cascade)
  personaId String?

  published     Boolean @default(false)
  model         String
  type          String
  modelSettings Json?

  // Some user customization
  name String @default("New chat")

  messages ChatMessage[]

  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String?

  // Xata fields
  xata_updatedat DateTime @default(now()) @db.Timestamptz(6)
  xata_id        String   @unique(map: "_pgroll_chat_xata_id_key") @default(dbgenerated("('rec_'::text || (xata_private.xid())::text)"))
  xata_version   Int      @default(0)
  xata_createdat DateTime @default(now()) @db.Timestamptz(6)
}

model ChatMessage {
  id String @id @default(dbgenerated("('cm_'::text || (xata_private.xid())::text)"))

  createdAt DateTime @default(now())

  role    String // Can be "user" or "assistant" or "system"
  content String

  chat   Chat?   @relation(fields: [chatId], references: [id], onDelete: Cascade)
  chatId String?

  // Xata fields
  xata_updatedat DateTime @default(now()) @db.Timestamptz(6)
  xata_id        String   @unique(map: "_pgroll_chat_message_xata_id_key") @default(dbgenerated("('rec_'::text || (xata_private.xid())::text)"))
  xata_version   Int      @default(0)
  xata_createdat DateTime @default(now()) @db.Timestamptz(6)
}
